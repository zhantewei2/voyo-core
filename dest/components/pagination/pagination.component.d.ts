import { VoyoComponent, VoyoTemplateRef } from "../commonComponent";
import { CoreSetting, PaginationParams, PaginationBehavior } from "../../core-setting.service";
import { RefeshComponent } from "../refresh/refresh.component";
import { CircleLoader } from "../utils/circle-loader";
import { ClassManage, ScrollListenerEvent } from "../../utils";
import { Observable } from "rxjs";
import { LoaderComponent } from "../loader/loader.component";
export declare class PaginationComponent extends VoyoComponent {
    set setScrollContainer(v: boolean);
    errorImg: string;
    emptyImg: string;
    errorText: string;
    emptyText: string;
    downNoMoreText: string;
    downErrorText: string;
    useRefresh: boolean;
    lowerThreshold: number;
    setting: CoreSetting;
    paginationFn: (params: PaginationParams) => Observable<any>;
    downNoMoreTemplate: VoyoTemplateRef;
    downErrorTemplate: VoyoTemplateRef;
    errorTemplate: VoyoTemplateRef;
    emptyTemplate: VoyoTemplateRef;
    classManage: ClassManage;
    pgEl: HTMLElement;
    refresher: RefeshComponent;
    circleLoader: CircleLoader;
    scrollContainer: HTMLElement;
    bottomAreaEl: HTMLElement;
    emptyEl: HTMLElement;
    errorEl: HTMLElement;
    initLoaderEl: LoaderComponent;
    bottomLoaderEl: LoaderComponent;
    _errorImg: string;
    _emptyImg: string;
    _errorText: string;
    _emptyText: string;
    _downNoMoreText: string;
    _downErrorText: string;
    currentPage: number;
    triggerDown: boolean;
    created(): void;
    handleScrollDown(listenScrcoll: Observable<ScrollListenerEvent>, scrollContainer: HTMLElement): void;
    get isRunning(): boolean;
    initRefresh(): void;
    initMethods: {
        initComplete: boolean;
        initExists: boolean;
        initDisplay: () => void;
        initRemove: () => void;
        emptyExists: boolean;
        emptyDisplay: () => void;
        emptyRemove: () => void;
        errorExists: boolean;
        errorDisplay: () => void;
        errorRemove: () => void;
    };
    refreshing: boolean;
    toRefresh(refreshRestore: () => void): void;
    handlePaginationResult(params: PaginationParams, result: any): string;
    handlePaginationError(type: PaginationBehavior): void;
    pullDownMethods: {
        hasError: boolean;
        hasEnd: boolean;
        loading: boolean;
        trigger: boolean;
        reset: () => void;
        load: () => void;
        loadSuccess: () => void;
        loadError: () => void;
        loadEnd: () => void;
    };
    toPullDown(): void;
    handlerResource(): void;
    entryStart(): void;
    mounted(): void;
    handleRefreshSvg(): void;
}
